#!/usr/local/bin/bash

# === Ensure Script is Run with Bash ===
if [ -z "$BASH_VERSION" ]; then
  echo "[ERROR] This script requires Bash to run. Please execute with 'bash <script_name>' or ensure your shell is Bash." >&2
  exit 1
fi

# === Enable Globstar for recursive search ===
shopt -s globstar

# === Global Variables & Paths ===
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
# Check if running from source (development mode) vs installed

VERSION_BASE="1.1.0"
if [ -d "$SCRIPT_DIR/lib" ]; then
  # Development mode: use local lib directory
  LIB_DIR="$SCRIPT_DIR/lib"
  VERSION="${VERSION_BASE}-dev"
else
  # Installed mode: use standard installation path
  LIB_DIR="/usr/local/share/bhyve-cli/lib"
  VERSION="${VERSION_BASE}-install"
fi
CONFIG_DIR="/usr/local/etc/bhyve-cli"
MAIN_CONFIG_FILE="$CONFIG_DIR/bhyve-cli.conf"
VM_CONFIG_BASE_DIR="$CONFIG_DIR/vm.d"
SWITCH_CONFIG_FILE="$CONFIG_DIR/switch.conf"

# === Bhyve Binaries Paths ===
BHYVE="/usr/sbin/bhyve"
BHYVECTL="/usr/sbin/bhyvectl"
BHYVELOAD="/usr/sbin/bhyveload"

# Load core functions and variables
# Check if lib dir exists before sourcing
if [ ! -d "$LIB_DIR" ]; then
    echo "[ERROR] Library directory not found at $LIB_DIR." >&2
    echo "Please run 'sudo make install' to install required files." >&2
    exit 1
fi
source "$LIB_DIR/core.sh"

# === Source All Library Files ===

# Load Helper Functions
for func_file in "$LIB_DIR"/functions/*.sh; do
    source "$func_file"
done

# Load Usage Messages
for usage_file in "$LIB_DIR"/usage/*.sh; do
    source "$usage_file"
done

# Load Command Implementations
for cmd_file in "$LIB_DIR"/commands/**/*.sh; do
    source "$cmd_file"
done

# Load the main dispatcher
source "$LIB_DIR/main_dispatcher.sh"

# === Main Execution Logic ===
main() {
  # Load main config to get global settings like log file path
  load_config

  # Check initialization status (unless the command is 'init')
  check_initialization "$1"

  # Most commands require root privileges, unless just asking for help
  if [[ "$2" == "--help" || "$2" == "-h" ]]; then
    # Skip root check when asking for subcommand help
    true
  else
    case "$1" in
      list|info|logs|template|iso|switch|vmnet|vm|--version|-v|--help|-h)
        # These commands and modules are safe to run as a non-root user
        # Note: 'status' was merged into 'list'
        ;;
      *)
        check_root
        ;;
    esac
  fi

  # Pass all arguments to the dispatcher
  main_dispatcher "$@"
}

# === Execute Main Function ===
main "$@"
